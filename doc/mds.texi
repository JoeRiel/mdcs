\input texinfo
@c %***start of header
@setfilename mds
@settitle The Maple Debugger Server Manual

@set VERSION 1.1
@set DATE June 2011

@dircategory Emacs
@direntry
* mds: (mds).      Maple Debugger Server
@end direntry

@c Version and Contact Info
@c @set MAINTAINERSITE @uref{http://orgmode.org,maintainers webpage}
@set AUTHOR Joe Riel
@set MAINTAINER Joe Riel
@set MAINTAINEREMAIL @email{jriel at san dot rr dot com}
@set MAINTAINERCONTACT @uref{mailto:jriel at maplesoft dot com,contact the maintainer}
@c %**end of header
@finalout

@copying
MDS is an Emacs package that implements a Maple Debugger Server.
It is part of the Maple Debugger Client/Server Architecture. 
Maple is a computer algebra system from Maplesoft Inc.

This manual is for MDS version @value{VERSION}.

Copyright @copyright{} 2011, Joseph S. Riel

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License.''
@end quotation
@end copying

@titlepage
@title The Maple Debugger Server Manual

@subtitle Release @value{VERSION}
@author by Joseph Riel

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top Maple Debugger Server Manual

@insertcopying
@end ifnottex

@menu
* Introduction::                
* Starting and Stopping MDS::   
* Showstat Buffer::             Stepping through code
* Output Buffer::               Maple output
* Debugging Tips::              Useful tips and technique
* Main Index::                  The main index 
* Key Index::                   Key bindings and where they are described
* Command and Variable Index::  Indices of commands and variables

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Summary::                     Summary of what MDS does
* Requirements::                What is needed to run MDS
* Installation::                How to install MDS
* Configuration::               How to configure MDS
* Customization::               Customize MDS variables
* Feedback::                    Bug reports, ideas, etc.

Configuration

* Emacs::                       Configuring @file{.emacs}

Showstat Buffer

* Live Showstat Buffer::        
* Dead Showstat Buffer::        
* Showstat Mode::               

Showstat Mode

* Execution::                   Executing procedure statements
* Status::                      Determining debugger status
* Breakpoints::                 Setting and clearing breakpoints
* Watchpoints::                 Setting and clearing watchpoints
* Evaluation::                  Evaluating expressions
* Miscellaneous::               Miscellaneous commands
* Patching::                    Live patching Maple procedures
* Help::                        Getting help

Output Buffer

* Output buffer commands::      

Command and Variable Index

* Command Index::               An index of commands
* Variable Index::              An index of variables

@end detailmenu
@end menu

@node Introduction, Starting and Stopping MDS, Top, Top
@chapter Introduction
@cindex introduction

@menu
* Summary::                     Summary of what MDS does
* Requirements::                What is needed to run MDS
* Installation::                How to install MDS
* Configuration::               How to configure MDS
* Customization::               Customize MDS variables
* Feedback::                    Bug reports, ideas, etc.
@end menu



@node Summary, Requirements, Introduction, Introduction
@comment  node-name,  next,  previous,  up
@section Summary
@cindex summary

MDS is an Emacs package that implements a @emph{Maple Debugger Server}.  
It is part of the @emph{Maple Debugger Client/Server} architecture.
This manual describes the installation, configuration, and usage
of the server.  For help with the client, see the Maple help pages
for @command{mdc}.@footnote{In Maple, type @samp{?mdc}}

The client/server architecture provides several benefits:

@itemize @bullet
@item
A common, full-featured, debugger interface that can be used whether
running Maple from the GUI, the command-line, or from a script.
@item
Remote debugging---the client (Maple) can be run on one machine, the
server on another. Communication is via standard TCP.
@item
Concurrent debugging---multiple Maple processes can be debugged
simultaneously. This permits interactively comparing the actions of
different versions of code, or comparing code run on machines with
different operating systems. It also permits independently or
synchronously stepping through separate processes in a @b{Grid}
application.
@end itemize

The user interface to the debugger, which is provided 
by MDS, has the following features.

@itemize @bullet
@item
The procedure being debugged is displayed in a window;
font-locking is enabled to highlight syntactic elements.
@item
Executing the code advances an @emph{overlay-arrow} 
that points to the next statement to be executed.
@item
The output of executed statements and evaluated expressions
are displayed in a separate window.  
These are printed in 1-D format so that they 
can be saved and reused as Maple input. 
@item
As lines of code are executed, they are echoed in the output
window.  The result provides a visual trace of all the code
that has been executed.  Clicking in the output window
will open a third window that displays the procedure and
statement that generated the selected output.
@item
Expressions can be directly evaluated and displayed in a nice format.
For example, a record can be displayed as a vertical list of equations
with field name on the left and the entry on the right.
@item
The common debugging commands, 
@strong{next}, @strong{into}, @strong{step}, etc.,
are bound to keystrokes (@kbd{n}, @kbd{i}, @kbd{s}, etc.).
@item 
Breakpoints can be set or cleared directly in the buffer.
@item
A trace mode permits rapidly tracing through instrumented procedures.
That, coupled with the ability to jump from the output to
the corresponding statement in the code, facilitates debugging.
@item
Debugged procedures can be @emph{live-patched}, that is, modified in-place.  
This permits testing changes without access to the full source code.
@end itemize

@node Requirements, Installation, Summary, Introduction
@comment  node-name,  next,  previous,  up
@section Requirements
@cindex requirements


@table @r
@item GNU Emacs 23.1+
MDS should work with earlier versions of Emacs but has not been tested.
@item Maple 14+  
MDS should work with earlier versions of Maple but has not been tested.
@item MapleV mode
An Emacs mode for developing Maple source code.
If you use Maple with Emacs, you definitely want to have this,
regardless whether you use MDS.
See 
@url{http://www.mapleprimes.com/blog/joe-riel/emacs-mode-for-maple}
for a recent version.
Debian and Ubuntu provide a version with the @file{emacs-goodies-el}
package, but it is dated.
@end table


@node Installation, Configuration, Requirements, Introduction
@comment  node-name,  next,  previous,  up
@section Installation
@cindex installation

Installation consists of unzipping the zip file,
@file{mdcs-@value{VERSION}.zip}, into a temporary directory and then
copying the files to the appropriate directories.  Included in the zip
file is a bash script, @file{install}, that byte-compiles the
files in the @file{lisp} sub-directory and then copies all files to the
standard locations.  Modify it per your setup then execute it with

@example
$ ./install
@end example

Windows and Mac users may have to do that manually.

@node Configuration, Customization, Installation, Introduction
@comment  node-name,  next,  previous,  up
@section Configuration
@cindex configuration

This section describes how to configure your system
to run MDS.  


@menu
* Emacs::                       Configuring @file{.emacs}
@end menu

@node Emacs,  , Configuration, Configuration
@comment  node-name,  next,  previous,  up
@subsection Emacs
@cindex emacs
@cindex .emacs

To permit @kbd{M-x mds} to start (and restart) MDS, 
add the following lines, appropriately modified,
to your @file{.emacs} file:

@example
(push "/home/joe/.emacs.d/mds" load-path)
(autoload 'mds "mds" "Restart the Maple Debugger Server" t)
@end example

Consider binding global keys to the commands
@command{mds-windows-cycle-clients} and
@command{mds-windows-cycle-groups}.  

The former is for cycling through the list of all clients, the latter
for cycling through groups of clients.  Groups are formed from clients
with labels that share a common basename. This is used with the
@command{mdc[Grid]}@footnote{Type @samp{?mdc[Grid]} in Maple for more
information.} commands in the Maple client.  For example, to bind these
commands to the @key{f12} and @key{CTRL}-@key{f12} keystrokes, do

@example
(global-set-key [f12] 'mds-windows-cycle-clients)
(global-set-key [C-f12] 'mds-windows-cycle-groups)
@end example


@node Customization, Feedback, Configuration, Introduction
@comment  node-name,  next,  previous,  up
@section Customization
@cindex customization

MDS has a number of variables that can be customized.
To access them load MDS (@code{M-x mds}) then run 
@code{M-x customize-group} and enter @code{mds} or
@code{mds-faces}.

The most useful customizations are the following:

@table @asis

@vindex mds-get-focus-function
@item @code{mds-get-focus-function}
A function that calls the window manager to transfer
focus to Emacs.  This is called when a client begins debugging.
The default is nil unless the command @command{wmctrl}
is available, then it is set to @code{mds-windows-get-focus-wmctrl}.
The nil value means that focus will not automatically be
transferred to Emacs.

@vindex mds-port
@item @code{mds-port}
An integer that is the TCP port number used for communication.
The default is 10000.

@vindex mds-show-args-flag
@findex mds-toggle-show-args
@item @code{mds-show-args-flag}
A boolean variable that when non-nil causes the arguments
to a procedure to be automatically displayed when first
entering the procedure.  The default is t.
The command @code{mds-toggle-show-args} toggles this variable.

@vindex mds-truncate-lines
@item @code{mds-truncate-lines}
A boolean value that, when non-nil, causes lines in the showstat and 
output windows to be truncated at the right edge of the screen 
rather than wrapping.   The default truncates lines.

@vindex mds-wait-until-ready
@item @code{mds-wait-until-ready}
A boolean value that, when non-nil, forces the debugger to wait until
a prompt has been received to send the user's response.  Setting it
to nil may allow a faster response, but prevents a notification when
the debugger has exited.

@vindex mds-wm-side-by-side
@item @code{mds-wm-side-by-side}
A boolean value that, when non-nil, causes the @b{live-showstat}
and @b{output} windows to appear side-by-side when displayed
in a single client view.  That is the default.

@vindex mds-wm-ss-fractional-size
@item @code{mds-wm-ss-fractional-size}
Specifies the fractional size of the showstat-live window to the full frame size.
Width is used when @code{mds-wm-side-by-side} is non-nil, otherwise height is used.  
If nil, the window is set to half the frame size.

@end table





@node Feedback,  , Customization, Introduction
@section Feedback
@cindex feedback

If you find problems with MDS, or if you have questions,
comments, or ideas, please mail them to Joe Riel, @email{jriel@@maplesoft.com}.

For bug reports, please provide as much information as possible,
including the version information of Emacs (@kbd{C-h v emacs-version}),
MDS, (@kbd{M-x mds-version}), and Maple (@code{version()}).


@node Starting and Stopping MDS, Showstat Buffer, Introduction, Top
@chapter Starting and Stopping MDS
@cindex starting mds
@cindex stopping mds

@findex mds
The @kbd{M-x mds} command starts the Maple Debugger Server.  If the
server is already running, it is restarted, which disconnects all
clients.  

When a client connects, two buffers are opened,
the @b{showstat buffer} (@pxref{Showstat Buffer}),
which displays the current procedure,
and 
the @b{debugger output buffer}, 
which displays Maple output during debugging.

@findex mds-stop
To stop the server, use @kbd{M-x mds-stop}.

@node Showstat Buffer, Output Buffer, Starting and Stopping MDS, Top
@chapter Showstat Buffer
@cindex showstat buffer

Each client has two showstat buffers, named @verb{|*showstat live*|} and
@verb{|*showstat dead*|}, that are used to display Maple procedures
in @emph{showstat form}, that is, with the statements numbered.
Both use @code{mds-showstat-mode}, though some commands are handled
differently.

@menu
* Live Showstat Buffer::        
* Dead Showstat Buffer::        
* Showstat Mode::               
@end menu

@node Live Showstat Buffer, Dead Showstat Buffer, Showstat Buffer, Showstat Buffer
@section Live Showstat Buffer
@cindex live showstat buffer

The live showstat buffer becomes active when an instrumented Maple procedure activates 
a breakpoint or watchpoint.
The buffer displays the output of the Maple @code{showstat} command, that is,
the current procedure being debugged.
Maple statements are numbered and Maple keywords and syntactic elements are highlighted.
The Maple statement to be executed next is indicated by an @emph{overlay-arrow} in the left margin.
Breakpoints are marked by asterisks to the right of the statement numbers.

The following figure shows a typical display.
The overlay-arrow @samp{=>} is at the first statement of the procedure,
which is also marked with an asterisk indicating that there is a breakpoint here.

@example
@anchor{fibonacci}
@iftex
@strong{fibonacci} := @strong{proc}(i::integer) 
=> 1*  @strong{if} i < 1 @strong{then}
   2     0
       @strong{elif} i = 1 @strong{then}
   3     1
       @strong{else}
   4     procname(i-2)+procname(i-1)
       @strong{end if}
@strong{end proc}
@end iftex
@ifinfo
fibonacci := proc(i::integer) 
=> 1*  if i < 1 then
   2     0
       elif i = 1 then
   3     1
       else
   4     procname(i-2)+procname(i-1)
       end if
end proc
@end ifinfo
@end example

@node Dead Showstat Buffer, Showstat Mode, Live Showstat Buffer, Showstat Buffer
@section Dead Showstat Buffer
@cindex dead showstat buffer

The dead showstat buffer looks the same as the live buffer.
It is used for displaying inactive procedures.  It is normally
not displayed until a request is made to display an inactive
procedure.

Currently typing execution keys in the dead showstat buffer
function the same as if typed in the live buffer to advance.  This
will most likely be changed.
 


@node Showstat Mode,  , Dead Showstat Buffer, Showstat Buffer
@section Showstat Mode
@cindex showstat mode

@code{mds-showstat-mode} binds keys to the common debugging commands. 
It also provides commands that are not available in the Maple debugger.
The following sections describe these bindings and commands.
They are grouped according to function.

@menu
* Execution::                   Executing procedure statements
* Status::                      Determining debugger status
* Breakpoints::                 Setting and clearing breakpoints
* Watchpoints::                 Setting and clearing watchpoints
* Evaluation::                  Evaluating expressions
* Miscellaneous::               Miscellaneous commands
* Patching::                    Live patching Maple procedures
* Help::                        Getting help
@end menu

@node Execution, Status, Showstat Mode, Showstat Mode
@subsection Execution
@cindex execution

MDS supports all the Maple debugger commands for executing the statements of
a procedure.  These commands are bound to single keystrokes in the Showstat buffer.
Output from these commands is written to the @emph{debugger output buffer}.

When any of these commands are executed, the cursor moves forward one character
and, if the flavor of Emacs supports it, the cursor changes to a hollow box.
This indicates that it is waiting for Maple to respond (for most commands this
change is too short to be noticeable).
When Maple responds the cursor moves to the next statement to be executed 
and the cursor returns to a filled box.

The cursor types can be customized via
the variables @code{mds-cursor-waiting} and @code{mds-cursor-ready}.
@vindex mds-cursor-waiting
@vindex mds-cursor-ready

The following table describes each of the execution commands.

@table @asis

@kindex c
@findex mds-cont
@item c (@code{mds-cont})
Continue: run until the next breakpoint or watchpoint, or until the program terminates.

@kindex i
@findex mds-into
@item i (@code{mds-into})
Into: halfway between @code{next} (@code{n}) and @code{step}
(@code{s}).  Executes the next statement.  Execution stops before the
following statement within the current function, regardless of whether
it is at the current nesting level or in the body of a control
structure. Execution does not stop in a called function.

@kindex n
@findex mds-next
@item n (@code{mds-next})
Next: execute the next statement.  If the statement
is a control structure (for example, @code{if} or @code{for}), it is
executed in its entirety before execution stops again. Likewise, if
the statement contains function calls, these are executed in their
entirety.  After executing the statement, control returns to the
Debugger as though a breakpoint had been set.

@kindex o
@findex mds-outfrom
@item o (@code{mds-outfrom})
Outfrom: execute until the current statement sequence has finished, or
until a breakpoint or watchpoint is encountered. If this command is
executed while stopped in a loop, execution continues until just
before the first statement to be executed after the closing @code{end do}.
Note that if the same breakpoint that caused execution to stop in
the loop is encountered again in a subsequent iteration of the loop,
execution will stop again. If this command is executed while
stopped in the body of an @code{if} statement, execution continues until just
before the first statement to be executed after the closing @code{end if}.

@kindex q
@findex mds-quit
@item q (@code{mds-quit})
Quit: terminate execution immediately.

@kindex r
@findex mds-return
@item r (@code{mds-return})
Return: execute statements until the first statement to be executed
after the currently executing procedure returns.

@kindex s
@findex mds-step
@item s (@code{mds-step})
Step: execute the next statement at any level.  Execution stops before
the following statement, regardless of whether it is at the current
nesting level, in the body of a control structure (for example,
@code{if}), or in a called function.

@kindex t
@findex mds-trace
@item t (@code{mds-trace})
Cycle through tracing modes.  The selected tracing mode, 
@strong{cont}, @strong{next}, @strong{into}, or @strong{step}, 
determines where the debugger temporarily halts and what output 
is displayed in the output buffer. The selected mode is equivalent 
to continually executing the corresponding debugging command.  

After selecting a tracing mode, tracing begins with the next command
that executes a statement.  Statements are then automatically executed
until the client exits.  At that point, the tracing mode should be
manually disabled by selecting the @strong{disabled} mode.  Reissuing
the original Maple command (in Maple) causes the debugger to
recommence, at which time the hyperlinks in the output buffer become
operational and permit quickly moving to places of interest.

@kindex @key{SPACE}
@findex mds-send-last-command
@item @key{SPACE} (@code{mds-send-last-command})
Re-execute the last command that executed a program statement.
The saved commands are
@command{cont},
@command{into},
@command{next},
@command{outfrom},
@command{return},
@command{step},
and
@command{return}.

@kindex @kbd{C-c C-c}
@findex mds-kill-maple
@item C-c C-c (@code{mds-kill-maple})
Kill the maple process.
This can be used to stop a runaway Maple computation (say an infinite loop).
@strong{This currently is not implemented.}

@end table

@node Status, Breakpoints, Execution, Showstat Mode
@subsection Status
@cindex status

MDS supports the following debugger commands for querying the status
of the debugger.

@table @asis

@kindex k
@findex mds-showstack
@item k (@code{mds-showstack})
Showstack: display an abbreviated form of the calling stack.
Only the names of the procedures are shown.  The name of the current
procedure is not shown.  Each name is an active link.  Clicking on a link
(mouse-1) opens the procedure in the @strong{showstat dead} buffer.

@kindex K
@findex mds-where
@item K (@code{mds-where})
Where: display the stack. 
The top-most level is shown first.
For each entry in the stack,
the name of the calling procedure and the current statement within it are shown,
followed on the next line by the list of arguments passed to corresponding procedure.
An optional prefix argument can be passed; it specifies the number of levels to display.
For example @kbd{C-u 2 K} displays the lowest two levels.

The procedure names are active links.  Clicking on a link opens the
procedure in the @strong{showstat dead} buffer, at the calling line.  
Breakpoints can be set in the opened procedure.
Use @code{M-x mds-goto-current-state} (@kbd{l})
to return to the current procedure.

@kindex p
@findex showstop
@item p (@code{mds-showstop})
Showstop: display a list of all procedures containing breakpoints, all
watchpoints, and all error watchpoints.

@kindex x
@findex showexception
@item x (@code{mds-showexception})
Showexception: display the value of @code{lastexception}.
The output is formatted;
to see the raw exception, use @kbd{C-u x}.

@kindex X
@findex showerror
@item X (@code{mds-showerror})
Showerror: display the value of @code{lasterror}.
The output is formatted;
to see the raw exception, use @kbd{C-u X}.


@end table


@node Breakpoints, Watchpoints, Status, Showstat Mode
@subsection Breakpoints
@cindex breakpoints

MDS can set and clear breakpoints, watchpoints, and error watchpoints.
Breakpoints can be set and cleared as is done in the Maple debugger, that is, 
by evaluating the expression @code{stopat <statement-number>}, 
however, the more convenient way is to move the cursor to the statement 
and type @kbd{b} or @kbd{u}, respectively.
A statement with a breakpoint has an asterisk to the right of the statement number;
@pxref{fibonacci,,the fibonacci listing}.

@table @asis

@kindex b
@findex mds-breakpoint
@item b (@code{mds-breakpoint})
Stopat:  Set a breakpoint at the start of the statement at the cursor.
An asterisk appears to the right of the statement number.
The debugger is halted each time it reaches the statement.

@kindex B
@findex mds-breakpoint-cond
@item B (@code{mds-breakpoint-cond})
Stopat-cond:  Set a conditional breakpoint at the start of the statement at the cursor.
The condition is entered in the mini-buffer.  It must be a Maple boolean expression.
A question mark appears to the right of the statement number.
The debugger is halted each time it reaches the statement and the condition evaluates to true.

@kindex p
@findex mds-showstop
@item p (@code{mds-showstop})
Showstop: display a list of all procedures containing breakpoints, all
watchpoints, and all error watchpoints.  Conditional breakpoints are
not included.

@kindex u
@findex mds-unstopat
@item u (@code{mds-unstopat})
Unstopat: Clear a breakpoint at the start of the statement at the cursor.

@end table

@node Watchpoints, Evaluation, Breakpoints, Showstat Mode
@subsection Watchpoints
@cindex watchpoints

A @emph{watchpoint} set on a variable causes the debugger to stop 
immediately following a statement that assigns a value to that variable.
A @emph{conditional watchpoint} is a watchpoint with an associated value;
the watchpoint is tripped when the variable is assigned that value.

Maple distinguishes two types of watchpoints: @emph{global} and @emph{local}.
Global watchpoints apply to global variables, local watchpoints to local variables.

@strong{Nota Bene:}
The Maple debugger has a bug; it does not properly handle watchpoints
for variables that are local to a module, or to a procedure of a module.
Attempting to set a local watchpoint on such a variable returns the error

@example
Error, global name or [proc name, local name] expected
@end example

As a workaround, set a global watchpoint on a module-local variable.
Note that a global watchpoint must be reset each time the procedure is debugged.

@table @asis

@kindex I
@findex mds-stopwhenif
@item I (@code{mds-stopwhenif})
stopwhenif:  Set a conditional watchpoint on the specified global variable.
The variable name and conditional value are entered separately in the mini-buffer.
Use @kbd{C-u W} to clear a conditional watchpoint.

@kindex p
@findex mds-showstop
@item p (@code{mds-showstop})
Showstop: display a list of all procedures containing breakpoints, all
watchpoints, and all error watchpoints.

@kindex w
@kindex C-u w
@findex mds-stopwhen-local
@item w (@code{mds-stopwhen-local})
stopwhen: Set a local watchpoint.   
The variable name is entered in the mini-buffer.
Use @kbd{C-u w} to clear a local watchpoint.


@kindex W
@findex mds-stopwhen-global
@item W (@code{mds-stopwhen-global})
stopwhen: Set a global watchpoint. 
The variable name is entered in the mini-buffer.
Use @kbd{C-u W} to clear a global watchpoint.



@end table


@node Evaluation, Miscellaneous, Watchpoints, Showstat Mode
@subsection Evaluation
@cindex evaluation, expression

MDS can evaluate expressions using the current context of Maple.

@table @asis

@kindex a
@findex mds-args
@item a (@code{mds-args})
Display the arguments of the current procedure as a vertical list of values.

@kindex A
@findex mds-show-args-as-equations
@item A (@code{mds-show-args-as-equations})
Display the arguments of the current procedure as a vertical list of equations.
The left-side of each equation is the formal parameter, 
the right-side is the value.

@kindex e
@findex mds-eval-and-display-expr
@item e (@code{mds-eval-and-display-expr})
Evaluate an expression in the current context.
The expression is entered in the mini-buffer.  
The default expression is taken from the text at the cursor.

@kindex E
@findex mds-eval-and-display-expr-global
@item E (@code{mds-eval-and-display-expr-global})
Evaluate an expression in the global context.
The expression is entered in the mini-buffer.  
The default expression is taken from the text at the cursor.

@kindex .
@findex mds-eval-and-prettyprint
@item . (@code{mds-eval-and-prettyprint})
Evaluate an expression and prettyprint the result.
The pretty-printing depends on the type of the evaluated expression.
The first line of the display (after the echoing of the expression)
shows the type of the output, the remaining lines display the
expression in an expanded form.

For a list or set, each element is displayed on a separate line.
For a record or table, each field/entry is displayed as an equation
with the index/field on the left, the entry on the right.

For example, the display of a record named @samp{SomeRecord} looks like

@example
@anchor{prettyprint}
SomeRecord:
(*record*)
a = 23,
b = 12,
c = NULL
@end example


@end table

@node  Miscellaneous, Patching, Evaluation, Showstat Mode
@subsection Miscellaneous
@cindex miscellaneous

@table @asis

@kindex L
@findex mds-ss-refresh
@item L (@code{mds-ss-refresh})
Refresh the procedure.
This is frequently needed after patching a procedure
(@pxref{Patching}).
MDS does not automatically redraw a procedure upon entry,
that happens only if the name of the procedure has changed.

@kindex T
@findex mds-toggle-truncate-lines
@item T (@code{mds-toggle-truncate-lines})
Toggle the truncating/wrapping of long lines. 
With prefix argument (@kbd{C-u T}) do so in the @emph{debugger output buffer}.

@end table

@node Patching, Help, Miscellaneous, Showstat Mode
@subsection Patching
@cindex patching

MDS can temporarily modify the procedure it is debugging.
This is an experimental feature---its operation is subject to change.
The following commands are currently assigned.

@table @asis
@kindex P
@findex mds-patch
@findex mds-patch-mode
@item P (@code{mds-patch})
Patch a procedure.  This is executed from the live showstat buffer.
It opens a buffer that contains a copy of the current procedure.
The name of the buffer is that of the procedure.
The buffer has major-mode @code{mds-patch-mode}, which is
a derivative of @code{maplev-mode}.  
@inforef{Top,,maplev}.
Edit this buffer as desired then execute @code{mds-patch-install}
to install the patch.

@kindex @kbd{C-c C-p}
@findex mds-patch-install
@item @kbd{C-c C-p} (@code{mds-patch-install})
Install the patch in the patch buffer.
This is executed from the patch buffer.

@end table

The following steps explain how to patch a procedure.

@enumerate
@item
Stop the debugger in the procedure to be patched.
@item
Execute @code{mds-patch} (@kbd{P}).
This opens a buffer that contains a copy of the procedure.
@item
Edit the procedure.
@item
Execute @code{mds-patch-install}
(@kbd{C-c C-p}, or use the @strong{Install} entry in the @strong{Patch} menu).
@item
Return to the Maple debugger showstat buffer.
@item 
Quit the debugger (@kbd{q}).
@item
Rerun the Maple code.
@end enumerate

You will usually have to re-instrument the procedure 
so that the debugger stops inside it.

If the patched procedure is a module local, or accesses module locals,
it may be necessary to execute, in Maple,
@code{kernelopts(opaquemodules=false)}
to permit the patched procedure to operate properly.

The patched procedure remains in effect until Maple is restarted.


@node Help,  , Patching, Showstat Mode
@subsection Help
@cindex help

The MDS showstat-mode has several ways for obtaining help.


@table @asis

@kindex h
@findex mds-help-debugger
@item h (@code{mds-help-debugger})
Display the Maple help page for the Maple debugger.

@kindex C-h m
@item C-h m
Display the help for this mode.

@kindex H
@findex mds-info
@item H (@code{mds-info})
Open the @command{info} document for MDS mode (this document).

@kindex C-?
@findex maplev-help-at-point
@item C-? (@code{maplev-help-at-point})
Display a Maple help page.  The topic is entered in the mini-buffer,
with the default the word under the cursor.

@kindex M-?
@findex maplev-proc-at-point
@item M-? (@code{maplev-proc-at-point})
Display a Maple procedure.  The procedure name is entered in the mini-buffer,
with the default the word under then cursor.

@end table



@node Output Buffer, Debugging Tips, Showstat Buffer, Top
@chapter Output Buffer
@cindex output buffer


The output buffer displays Maple output during debugging.  
It also echos the user input, and optionally, the input statements executed.

The following is representative of the output buffer content

@example
@b{fibonacci}
(*1*) into    @b{if} i < 1 
32
(*2*) 
@end example

The line ``@b{fibonacci}'' is the name of the procedure that is being debugged.
Whenever a procedure is entered, the name of it is printed in the output buffer.
The name is hyperlinked; clicking on it (mouse-1) displays the procedure
in the showstat dead buffer.

Debugger commands that evaluate program code are echoed in the buffer.
If the `mds-???' variable is non-nil, the corresponding statement is printed
after the debugger command.  This provides a visual trace of the commands executed.

Right-clicking (mouse-3) in the output buffer displays, in the showstat-dead
buffer, the procedure at the appropriate statement that generated that output.

@menu
* Output buffer commands::      
@end menu

@node  Output buffer commands,  , Output Buffer, Output Buffer
@section Output buffer commands

@findex maplev-proc-at-point
The @command{mds-out-write-buffer} command writes the output buffer
to a specified file.  Unlike @command{write-file}, the buffer name
does not change.



@node  Debugging Tips, Main Index, Output Buffer, Top
@chapter Debugging Tips
@cindex debugging tips


@section Set breakpoint in calling procedure

After using @command{stoperror} to stop the debugger at the location of
an error, you realize that the real problem lies in an ``upstream''
procedure.  To debug it, you want to set a breakpoint in that procedure.

@enumerate
@item
Use the @command{mds-where} command (@kbd{W}) to display the
stack contents in the output buffer.

@item
Click on the relevant calling procedure.  The procedure is
displayed in the showstat-dead buffer

@item
In the showstat-dead buffer, set a breakpoint at an appropriate
statement in the calling procedure.

@item
Quit the debugger (@kbd{q}) and reexecute the code in Maple.  
The debugger will halt in the procedure of interest.

@end enumerate

@section Locate source of unexpected result

A computation gives the wrong result, but it is not apparent which
procedure, or what line of code, is the culprit.  

@enumerate

@item
Instrument and execute the initial procedure.  

@item
In the debugger, use the @command{mds-trace} command to select
@strong{step} as the tracing mode. Execute @command{step} to begin
tracing.  Every procedure that is called will be traced and the results
written to the output buffer.  Tracing halts when the debugger exits.

@item
Use the @command{mds-trace} command to disable tracing.  

@item
In Maple, reexecute the code to reestablish debugging.  

@item
In the debugger output buffer, use the search facility of Emacs to find
the first appearance of the undesired expression.

@item
Right-click on the expression in the output buffer; the showstat-dead
buffer will open and display the procedure and statement that produced
the result.

@end enumerate

Because @strong{step} tracing mode generates a lot of output, you may
find it more practical to instrument the suspected procedures and
use @strong{into} tracing mode.

@node Main Index, Key Index, Debugging Tips, Top
@unnumbered Main Index
@printindex cp

@node Key Index, Command and Variable Index, Main Index, Top
@unnumbered Key Index
@printindex ky

@node Command and Variable Index,  , Key Index, Top
@unnumbered Command and Variable Index

@menu
* Command Index::               An index of commands
* Variable Index::              An index of variables
@end menu

@node Command Index, Variable Index, Command and Variable Index, Command and Variable Index
@section Function Index
@printindex fn

@node Variable Index,  , Command Index, Command and Variable Index
@section Variable Index
@printindex vr


@bye
