\input texinfo
@c %***start of header
@setfilename mds
@settitle The Maple Debugger Server Manual

@set VERSION 0.1.1.1
@set DATE June 2011

@dircategory Emacs
@direntry
* Mds mode: (mds).      Source-code debugger for Maple
@end direntry

@c Version and Contact Info
@c @set MAINTAINERSITE @uref{http://orgmode.org,maintainers webpage}
@set AUTHOR Joe Riel
@set MAINTAINER Joe Riel
@set MAINTAINEREMAIL @email{jriel at san dot rr dot com}
@set MAINTAINERCONTACT @uref{mailto:jriel at maplesoft dot com,contact the maintainer}
@c %**end of header
@finalout

@copying
MDS is an Emacs package that implements a Maple Debugger Server.
Maple is a computer algebra system from Maplesoft Inc.

This manual is for MDS version @value{VERSION}.

Copyright @copyright{} 2011, Joseph S. Riel

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License.''
@end quotation
@end copying

@titlepage
@title The MDS Manual

@subtitle Release @value{VERSION}
@author by Joseph Riel

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top Mds Manual

@insertcopying
@end ifnottex

@menu
* Introduction::                Getting started
* Launching MDS::               
* Showstat Buffer::             Stepping through code
* Main Index::                  The main index 
* Key Index::                   Key bindings and where they are described
* Command and Variable Index::  Indices of commands and variables

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Summary::                     Summary of what MDS does
* Requirements::                What is needed to run MDS
* Installation::                
* Configuration::               How to configure MDS
* Customization::               Customize MDS variables
* Feedback::                    Bug reports, ideas, etc.

Configuration

* Emacs::                       Updating @file{.emacs}

Showstat Buffer

* Execution::                   Executing procedure statements
* Status::                      Determining debugger status
* Breakpoints::                 Setting and clearing breakpoints
* Watchpoints::                 Setting and clearing watchpoints
* Evaluation::                  Evaluating expressions
* Miscellaneous::               Miscellaneous commands
* Help::                        Get help

Command and Variable Index

* Command Index::               An index of commands
* Variable Index::              An index of variables

@end detailmenu
@end menu

@node Introduction, Launching MDS, Top, Top
@chapter Introduction
@cindex introduction

@menu
* Summary::                     Summary of what MDS does
* Requirements::                What is needed to run MDS
* Installation::                
* Configuration::               How to configure MDS
* Customization::               Customize MDS variables
* Feedback::                    Bug reports, ideas, etc.
@end menu



@node Summary, Requirements, Introduction, Introduction
@comment  node-name,  next,  previous,  up
@section Summary
@cindex summary

MDS is an Emacs package that implements a 
@emph{Maple Debugger Server}, which is half of
a @emph{Maple Debugger Client/Server} pair.
This client/server architecture provides
several benefits:

@itemize @bullet
@item
A common, full-featured, debugger interface that can be used whether
running Maple from the GUI or the command-line.
@item
Remote debugging---the client (Maple) can be run on one machine, the
server on another. Communication is via standard TCP.
@item
Concurrent debugging---multiple Maple processes can debugged
simultaneously. This permits interactively comparing the actions of
different versions of code, or comparing code run on machines with
different operating systems. It also permits independently or
synchronously stepping through separate processes in a @b{Grid}
application.
@end itemize


The user interface to the debugger, which is provided 
by MDS, has the following features.

@itemize @bullet
@item
The procedure being debugged is displayed in a buffer;
font-locking is enabled to highlight syntactic elements.
@item
Executing the code advances an @emph{overlay-arrow} 
that points to the next statement to be executed.
@item
The output of executed statements and evaluated expressions
are displayed in a separate buffer.  
These are printed in 1-D format so that the buffer 
can be saved and reused as Maple input.
@item
Expressions can be directly evaluated and displayed in a nice format.
For example, a record can be displayed as a vertical list of equations
with field name on the left and the entry on the right.
@item
The common debugging commands, 
@strong{next}, @strong{into}, @strong{step}, etc.,
are bound to keystrokes (@kbd{n}, @kbd{i}, @kbd{s}, etc.).
@item 
Breakpoints can be set or cleared directly in the buffer.
@end itemize

While the core of MDS is based on @command{mdb}, an earlier debugger
that used @b{OpenMaple} as an interface between Emacs and Maple, it
has significant improvements.  Because @b{OpenMaple} is not used
with MDS, there is no requirement to compile an executable.
That makes installation substantially simpler. 


@node Requirements, Installation, Summary, Introduction
@comment  node-name,  next,  previous,  up
@section Requirements
@cindex requirements


@table @r
@item GNU Emacs 23.3+
MDS may work with earlier versions, but I have not tested it.
@item Maple 15+  
MDS should work with earlier versions of Maple, however,
it currently has not been tested with any.
@item MapleV mode
An Emacs mode for developing Maple source code.
If you use Maple with Emacs, you definitely want to have this,
regardless whether you use MDS.
See 
@url{http://www.mapleprimes.com/blog/joe-riel/emacs-mode-for-maple}
for a recent version.
Debian and Ubuntu provide a version with the @file{emacs-goodies-el}
package, but it is dated.
@end table


@node Installation, Configuration, Requirements, Introduction
@comment  node-name,  next,  previous,  up
@section Installation
@cindex installation

See the included @file{README} file on how to install MDS.


@node Configuration, Customization, Installation, Introduction
@comment  node-name,  next,  previous,  up
@section Configuration
@cindex configuration

This section describes how to configure your system
to run MDS.  


@menu
* Emacs::                       Updating @file{.emacs}
@end menu

@node Emacs,  , Configuration, Configuration
@comment  node-name,  next,  previous,  up
@subsection Emacs
@cindex emacs
@cindex .emacs

To permit @kbd{M-x mds} to start (and restart) mds, 
add the following line to your @file{.emacs} file:

@example
(autoload 'mds "mds" "Restart the Maple Debugger Server" t)
@end example

You will probably want to bind global keys to the 
commands @command{mds-windows-cycle-clients}
and @command{mds-windows-cycle-groups}.  The former
is for cycling through connected clients, the latter
for cycling through groups of clients.  Groups are
formed when, for example, the Maple @code{mdc:-Grid} package
is used to launch parallel debugging sessions.  
To bind these to the @key{f12} and @key{CTRL}-@key{f12}
keystrokes, do

@example
(global-set-key [f12] 'mds-windows-cycle-clients)
(global-set-key [C-f12] 'mds-windows-cycle-groups)
@end example


@node Customization, Feedback, Configuration, Introduction
@comment  node-name,  next,  previous,  up
@section Customization
@cindex customization

MDS has a number of variables that can be customized.
To access them load MDS (@code{M-x mds}) then run 
@code{M-x customize-group} and enter @code{mds} or
@code{mds-faces}.


@node Feedback,  , Customization, Introduction
@section Feedback
@cindex feedback

If you find problems with MDS, or if you have questions,
comments, or ideas, please mail them to Joe Riel, @email{jriel@@maplesoft.com}.

For bug reports, please provide as much information as possible,
including the version information of Emacs (@kbd{C-h v emacs-version}),
MDS, (@kbd{C-h v mds-version}), and Maple (@code{version()}).


@node Launching MDS, Showstat Buffer, Introduction, Top
@chapter Launching MDS
@cindex launching mds

@findex mds
The @kbd{M-x mds} command starts the Maple Debugger Server.  If the
server is already running, it is restarted, which disconnects all
clients.  

When a client connects, two buffers are opened,
the @emph{showstat buffer} (@pxref{Showstat Buffer}),
which displays the current procedure,
and 
the @emph{debugger output buffer}, 
which displays Maple output during debugging.


@node Showstat Buffer, Main Index, Launching MDS, Top
@chapter Showstat Buffer
@cindex showstat buffer

The showstat buffer, which uses @code{mds-showstat-mode},
becomes active when an instrumented Maple procedure activates a breakpoint or watchpoint.
The buffer displays the output of the Maple @code{showstat} command, that is,
the current procedure being debugged.
Maple statements are numbered and Maple keywords and syntactic elements are highlighted.
The Maple statement to be executed next is indicated by an @emph{overlay-arrow} in the left margin.
Breakpoints are marked by asterisks to the right of the statement numbers.

The following figure shows a typical display.
The overlay-arrow @samp{=>} is at the first statement of the procedure,
which is also marked with an asterisk indicating that there is a breakpoint here.

@example
@anchor{fibonacci}
@iftex
@strong{fibonacci} := @strong{proc}(i::integer) 
=> 1*  @strong{if} i < 1 @strong{then}
   2     0
       @strong{elif} i = 1 @strong{then}
   3     1
       @strong{else}
   4     procname(i-2)+procname(i-1)
       @strong{end if}
@strong{end proc}
@end iftex
@ifinfo
fibonacci := proc(i::integer) 
=> 1*  if i < 1 then
   2     0
       elif i = 1 then
   3     1
       else
   4     procname(i-2)+procname(i-1)
       end if
end proc
@end ifinfo
@end example


 

@example
@end example

@code{MDS-showstat-mode} binds keys to the common debugging commands. 
It also provides commands that are not available in the Maple debugger.
The following sections describe these bindings and commands.
They are grouped according to function.

@menu
* Execution::                   Executing procedure statements
* Status::                      Determining debugger status
* Breakpoints::                 Setting and clearing breakpoints
* Watchpoints::                 Setting and clearing watchpoints
* Evaluation::                  Evaluating expressions
* Miscellaneous::               Miscellaneous commands
* Help::                        Get help
@end menu

@node Execution, Status, Showstat Buffer, Showstat Buffer
@section Execution
@cindex execution

MDS supports all the Maple debugger commands for executing the statements of
a procedure.  These commands are bound to single keystrokes in the Showstat buffer.
Output from these commands is written to the @emph{debugger output buffer}.

When any of these commands are executed, the cursor moves forward one character
and, if the flavor of Emacs supports it, the cursor changes to a hollow box.
This indicates that it is waiting for Maple to respond (for most commands this
change is too short to be noticeable).
When Maple responds the cursor moves to the next statement to be executed 
and the cursor returns to a filled box.

The cursor types can be customized via
the variables @code{mds-cursor-waiting} and @code{mds-cursor-ready}.
@vindex mds-cursor-waiting
@vindex mds-cursor-ready

The following table describes each of the execution commands.

@table @asis

@kindex c
@findex mds-cont
@item c (@code{mds-cont})
Continue: run until the next breakpoint or watchpoint, or until the program terminates.

@kindex i
@findex mds-into
@item i (@code{mds-into})
Into: halfway between @code{next} (@code{n}) and @code{step}
(@code{s}).  Executes the next statement.  Execution stops before the
following statement within the current function, regardless of whether
it is at the current nesting level or in the body of a control
structure. Execution does not stop in a called function.

@kindex n
@findex mds-next
@item n (@code{mds-next})
Next: execute the next statement.  If the statement
is a control structure (for example, @code{if} or @code{for}), it is
executed in its entirety before execution stops again. Likewise, if
the statement contains function calls, these are executed in their
entirety.  After executing the statement, control returns to the
Debugger as though a breakpoint had been set.

@kindex o
@findex mds-outfrom
@item o (@code{mds-outfrom})
Outfrom: execute until the current statement sequence has finished, or
until a breakpoint or watchpoint is encountered. If this command is
executed while stopped in a loop, execution continues until just
before the first statement to be executed after the closing @code{end do}.
Note that if the same breakpoint that caused execution to stop in
the loop is encountered again in a subsequent iteration of the loop,
execution will stop again. If this command is executed while
stopped in the body of an @code{if} statement, execution continues until just
before the first statement to be executed after the closing @code{end if}.

@kindex q
@findex mds-quit
@item q (@code{mds-quit})
Quit: terminate execution immediately.

@kindex r
@findex mds-return
@item r (@code{mds-return})
Return: execute statements until the first statement to be executed
after the currently executing procedure returns.

@kindex s
@findex mds-step
@item s (@code{mds-step})
Step: execute the next statement at any level.  Execution stops before
the following statement, regardless of whether it is at the current
nesting level, in the body of a control structure (for example,
@code{if}), or in a called function.

@kindex t
@findex mds-trace
@item t (@code{mds-trace})
Select a tracing mode.  Two tracing modes are available, @strong{into}
and @strong{step}.  If neither tracing mode is selected, then tracing
does not occur.  When tracing begins, debugging will continue automatically
until the client exits.  At that point, the user should disable
tracing mode (press @kbd{t}).  Then, by reissuing the Maple command,
the hyperlinks in the output buffer become active and permit quickly
moving to places of interest in the showstat buffers.

@kindex @key{SPACE}
@findex mds-send-last-command
@item @key{SPACE} (@code{mds-send-last-command})
Re-execute the last command.
This only applies to the commands in this table.

@kindex @kbd{C-c C-c}
@findex mds-kill-maple
@item C-c C-c (@code{mds-kill-maple})
Kill the maple process, switch to the @code{MDS Buffer}, and restart the Maple process.
This can be used to stop a runaway Maple computation (say an infinite loop).
OpenMaple does not properly service interrupts, so it is currently not possible to
interrupt it and regain control, as can be done with the builtin Maple debugger.

@end table

@node Status, Breakpoints, Execution, Showstat Buffer
@section Status
@cindex status

MDS supports the following debugger commands for querying the status
of the debugger.

@table @asis

@kindex k
@findex mds-showstack
@item k (@code{mds-showstack})
Showstack: display an abbreviated form of the calling stack.
Only the names of the procedures are shown.  The name of the current
procedure is not shown.

@kindex K
@findex mds-where
@item K (@code{mds-where})
Where: display the stack. 
The top-most level is shown first.
For each entry in the stack,
the name of the calling procedure and the current statement within it are shown,
followed on the next line by the list of arguments passed to corresponding procedure.
An optional prefix argument can be passed; it specifies the number of levels to display.
For example @kbd{C-u 2 K} displays the lowest two levels.

The procedure names are active links.  Clicking on a link opens the
procedure in the showstat buffer, at the callling line.  
Breakpoints can be set in the opened procedure.
Use @code{M-x mds-goto-current-state} (@kbd{l})
to return to the current procedure.

For this to work with module exports, the modules must be @emph{named},
otherwise the output of the @command{where} command does
not include the module name, so the links do not work properly.
To name a module either use the explicit form (see the Maple 
help page @code{module[named]}) or save the module to an archive
and then load it.

@kindex p
@findex showstop
@item p (@code{mds-showstop})
Showstop: display a list of all procedures containing breakpoints, all
watchpoints, and all error watchpoints.

@kindex x
@findex showexception
@item x (@code{mds-showexception})
Showexception: display the value of @code{lastexception}.
The output is formatted;
to see the raw exception, use @kbd{C-u x}.

@kindex X
@findex showerror
@item X (@code{mds-showerror})
Showerror: display the value of @code{lasterror}.
The output is formatted;
to see the raw exception, use @kbd{C-u X}.


@end table


@node Breakpoints, Watchpoints, Status, Showstat Buffer
@section Breakpoints
@cindex breakpoints

MDS can set and clear breakpoints, watchpoints, and error watchpoints.
Breakpoints can be set and cleared as is done in the Maple debugger, that is, 
by evaluating the expression @code{stopat <statement-number>}, 
however, the more convenient way is to move the cursor to the statement 
and type @kbd{b} or @kbd{u}, respectively.
A statement with a breakpoint has an asterisk to the right of the statement number;
@pxref{fibonacci,,the fibonacci listing}.

@table @asis

@kindex b
@findex mds-breakpoint
@item b (@code{mds-breakpoint})
Stopat:  Set a breakpoint at the start of the statement at the cursor.
An asterisk appears to the right of the statement number.
The debugger is halted each time it reaches the statement.

@kindex B
@findex mds-breakpoint-cond
@item B (@code{mds-breakpoint-cond})
Stopat-cond:  Set a conditional breakpoint at the start of the statement at the cursor.
The condition is entered in the mini-buffer.  It must be a Maple boolean expression.
A question mark appears to the right of the statement number.
The debugger is halted each time it reaches the statement and the condition evaluates to true.

@kindex p
@findex mds-showstop
@item p (@code{mds-showstop})
Showstop: display a list of all procedures containing breakpoints, all
watchpoints, and all error watchpoints.  Conditional breakpoints are
not included.

@kindex u
@findex mds-unstopat
@item u (@code{mds-unstopat})
Unstopat: Clear a breakpoint at the start of the statement at the cursor.

@end table

@node Watchpoints, Evaluation, Breakpoints, Showstat Buffer
@section Watchpoints
@cindex watchpoints

A @emph{watchpoint} set on a variable causes the debugger to stop 
immediately following a statement that assigns a value to that variable.
A @emph{conditional watchpoint} is a watchpoint with an associated value;
the watchpoint is tripped when the variable is assigned that value.

Maple distinguishes two types of watchpoints: @emph{global} and @emph{local}.
Global watchpoints apply to global variables, local watchpoints to local variables.

@strong{Nota Bene:}
The Maple debugger has a bug in that it does not properly handle watchpoints
for variables that are local to a module-local procedure.
Attempting to set a watchpoint on such a variable returns the error

@example
Error, global name or [proc name, local name] expected
@end example

As a workaround, set a global watchpoint on a module-local variable.
Note that a global watchpoint must be reset each time the procedure is debugged.

@table @asis

@kindex I
@findex mds-stopwhenif
@item I (@code{mds-stopwhenif})
stopwhenif:  Set a conditional watchpoint on the specified global variable.
The variable name and conditional value are entered separately in the mini-buffer.
Use @kbd{C-u W} to clear a conditional watchpoint.

@kindex p
@findex mds-showstop
@item p (@code{mds-showstop})
Showstop: display a list of all procedures containing breakpoints, all
watchpoints, and all error watchpoints.

@kindex w
@kindex C-u w
@findex mds-stopwhen-local
@item w (@code{mds-stopwhen-local})
stopwhen: Set a local watchpoint.   
The variable name is entered in the mini-buffer.
Use @kbd{C-u w} to clear a local watchpoint.


@kindex W
@findex mds-stopwhen-global
@item W (@code{mds-stopwhen-global})
stopwhen: Set a global watchpoint. 
The variable name is entered in the mini-buffer.
Use @kbd{C-u W} to clear a global watchpoint.



@end table


@node Evaluation, Miscellaneous, Watchpoints, Showstat Buffer
@section Evaluation
@cindex evaluation, expression

MDS can evaluate expressions using the current context of Maple.

@table @asis

@kindex a
@findex mds-args
@item a (@code{mds-args})
Display the arguments of the current procedure as a vertical list of values.

@kindex A
@findex mds-show-args-as-equations
@item A (@code{mds-show-args-as-equations})
Display the arguments of the current procedure as a vertical list of equations.
The left-side of each equation is the formal parameter, 
the right-side is the value.

@kindex e
@findex mds-eval-and-display-expr
@item e (@code{mds-eval-and-display-expr})
Evaluate an expression in the current context.
The expression is entered in the mini-buffer.  
The default expression is taken from the text at the cursor.

@kindex E
@findex mds-eval-and-display-expr-global
@item E (@code{mds-eval-and-display-expr-global})
Evaluate an expression in the global context.
The expression is entered in the mini-buffer.  
The default expression is taken from the text at the cursor.

@kindex .
@findex mds-eval-and-prettyprint
@item . (@code{mds-eval-and-prettyprint})
Evaluate an expression and prettyprint the result.
The pretty-printing depends on the type of the evaluated expression.
The first line of the display (after the echoing of the expression)
shows the type of the output, the remaining lines display the
expression in an expanded form.

For a list or set, each element is displayed on a separate line.
For a record or table, each field/entry is displayed as an equation
with the index/field on the left, the entry on the right.

For example, the display of a record named @samp{SomeRecord} looks like

@example
@anchor{prettyprint}
SomeRecord:
(*record*)
a = 23,
b = 12,
c = NULL
@end example


@end table

@node Miscellaneous, Help, Evaluation, Showstat Buffer
@section Miscellaneous
@cindex miscellaneous

@table @asis

@kindex T
@findex mds-toggle-truncate-lines
@item T (@code{mds-toggle-truncate-lines})
Toggle the truncating/wrapping of long lines. 
With prefix argument (@kbd{C-u T}) do so in the @emph{debugger output buffer}.

@findex mds-toggle-show-args
@item @code{mds-toggle-show-args}
Toggle the display of arguments upon entering a procedure.

@end table

@node Help,  , Miscellaneous, Showstat Buffer
@section Help
@cindex help

@table @asis

@kindex h
@findex mds-help-debugger
@item h (@code{mds-help-debugger})
Display the Maple help page for the Maple debugger.

@kindex C-h m
@item C-h m
Display the help for this mode.

@kindex H
@findex mds-info
@item H (@code{mds-info})
Open the @command{info} document for MDS mode.

@kindex C-?
@findex maplev-help-at-point
@item C-? (@code{maplev-help-at-point})
Display a Maple help page.  The topic is entered in the mini-buffer,
with the default the word under the cursor.

@kindex M-?
@findex maplev-proc-at-point
@item M-? (@code{maplev-proc-at-point})
Display a Maple procedure.  The procedure name is intered in the mini-buffer,
with the default the word under then cursor.

@end table




@node Main Index, Key Index, Showstat Buffer, Top
@unnumbered Main Index
@printindex cp

@node Key Index, Command and Variable Index, Main Index, Top
@unnumbered Key Index
@printindex ky

@node Command and Variable Index,  , Key Index, Top
@unnumbered Command and Variable Index

@menu
* Command Index::               An index of commands
* Variable Index::              An index of variables
@end menu

@node Command Index, Variable Index, Command and Variable Index, Command and Variable Index
@section Function Index
@printindex fn

@node Variable Index,  , Command Index, Command and Variable Index
@section Variable Index
@printindex vr


@bye
