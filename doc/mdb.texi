\input texinfo
@c %***start of header
@setfilename mdb
@settitle The Mdb Manual

@set VERSION 1.2b
@set DATE May 2010

@dircategory Emacs
@direntry
* Mdb mode: (mdb).      Source-code debugger for Maple
@end direntry

@c Version and Contact Info
@c @set MAINTAINERSITE @uref{http://orgmode.org,maintainers webpage}
@set AUTHOR Joe Riel
@set MAINTAINER Joe Riel
@set MAINTAINEREMAIL @email{joer at san dot rr dot com}
@set MAINTAINERCONTACT @uref{mailto:joer at san dot rr dot com,contact the maintainer}
@c %**end of header
@finalout

@copying
Mdb is a GNU Emacs major mode for debugging Maple code.
Maple is a computer algebra system from Maplesoft Inc.

This manual is for Mdb version @value{VERSION}.

Copyright @copyright{} 2009, Joseph S. Riel

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License.''
@end quotation
@end copying

@titlepage
@title The Mdb Manual

@subtitle Release @value{VERSION}
@author by Joseph Riel

@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Output the table of contents at the beginning.
@contents

@ifnottex
@node Top, Introduction, (dir), (dir)
@top Mdb Mode Manual

@insertcopying
@end ifnottex

@menu
* Introduction::                Getting started
* Mdb Buffer::                  Launching Mdb
* Showstat Buffer::             Stepping through code
* Main Index::                  The main index 
* Key Index::                   Key bindings and where they are described
* Command and Variable Index::  Indices of commands and variables

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Summary::                     Summary of what Mdb does
* Requirements::                What is needed to run Mdb
* Build::                       How to build Mdb
* Installation::                How to install Mdb
* Configuration::               How to configure Mdb
* Feedback::                    Bug reports, ideas, etc.

Configuration

* Emacs::                       Updating @file{.emacs}
* Environment::                 Environmental variables

Mdb Buffer

* Usage::                       Intended usage of the mdb buffer
* History and Key Bindings::    The history mechanism and key bindings

Showstat Buffer

* Execution::                   Executing procedure statements
* Status::                      Determining debugger status
* Breakpoints::                 Setting and clearing breakpoints
* Watchpoints::                 Setting and clearing watchpoints
* Evaluation::                  Evaluating expressions
* Miscellaneous::               
* Help::                        Get help

Command and Variable Index

* Command Index::               An index of commands
* Variable Index::              An index of variables

@end detailmenu
@end menu

@node Introduction, Mdb Buffer, Top, Top
@chapter Introduction
@cindex introduction

@menu
* Summary::                     Summary of what Mdb does
* Requirements::                What is needed to run Mdb
* Build::                       How to build Mdb
* Installation::                How to install Mdb
* Configuration::               How to configure Mdb
* Feedback::                    Bug reports, ideas, etc.
@end menu



@node Summary, Requirements, Introduction, Introduction
@comment  node-name,  next,  previous,  up
@section Summary
@cindex summary

Mdb is an Emacs front-end to the Maple command-line debugger.
It acts as a source code debugger for Maple procedures.
It is not a true source code debugger in that it steps through
the interpreted Maple code, which does not include comments
and other non-executed Maple statements,
rather than the actual source.

@itemize @bullet
@item
The procedure being debugged is displayed in a buffer;
font-locking is enabled to highlight syntactic elements.
@item
Executing the code advances an @emph{overlay-arrow} 
that points to the next statement to be executed.
@item
The output of executed statements and evaluated expressions
are displayed in a separate buffer.  
These are printed in 1-D format so that the buffer 
can be saved and reused as Maple input.
@item
Upon entering a procedure,
its formal parameters and values are displayed as a list of equations.
@item
Expressions can be directly evaluated and displayed in a nice format.
For example, a record can be displayed as a vertical list of equations
with field name on the left and the entry on the right.
@item
The common debugging commands, 
  @strong{next}, @strong{into}, @strong{step}, etc.,
are bound to keystrokes (@kbd{n}, @kbd{i}, @kbd{s}).
@item 
Breakpoints can be set or cleared directly in the buffer.

@end itemize

@node Requirements, Build, Summary, Introduction
@comment  node-name,  next,  previous,  up
@section Requirements
@cindex Requirements


@table @r
@item GNU Emacs 22.2.1+
Mdb may work with earlier versions, but I have not tested it.
@item Maple 14+  
Mdb will work with earlier versions of Maple, however,
some features may not be available, or work as well.  In particular,
the prettyprinting of a procedure's arguments can not be done robustly
in earlier versions.
@item MapleV mode
An Emacs mode for developing Maple source code.
If you use Maple with Emacs, you definitely want to have this,
regardless whether you use Mdb.
See 
@url{http://www.mapleprimes.com/blog/joe-riel/emacs-mode-for-maple}
for a recent version.
Debian and Ubuntu provide a version with the @file{emacs-goodies-el}
package, but it may be dated.
@end table



@node Build, Installation, Requirements, Introduction
@comment  node-name,  next,  previous,  up
@section Build
@cindex Build

This section describes how to build Mdb.
The readme files included with the distribution,
@file{README} and @file{c/README} give further details.
In all likelihood they take precedence over this document;
contact the author (@ref{Feedback}) if in doubt.

There are two makefiles included with the distribution,
@file{Makefile} and @file{c/Makefile}.
The former creates
  the documentation (@file{doc/mdb})
  and the Maple archive (@file{maple/mdb.mla}).
It calls the latter to build the binary executable (@file{c/pmaple}).
Modify these makefiles per your setup.  In particular,
be sure to properly assign the
@code{lispdir}, @code{infodir}, and @code{mapleinstalldir}
variables.

@vindex MAPLE_ROOT
The @file{c/Makefile} uses the environmental variable
@env{MAPLE_ROOT}, which should point to the installation directory of
Maple.  This environmental variable is also used by the installed
scripts to locate the Maple libraries.

In the @file{mdb} directory, run

@example
make build-all
@end example


@node Installation, Configuration, Build, Introduction
@section Installation
@cindex installation

After building Mdb, install it with

@example
make install
@end example


@node Configuration, Feedback, Installation, Introduction
@comment  node-name,  next,  previous,  up
@section Configuration
@cindex configuration


@menu
* Emacs::                       Updating @file{.emacs}
* Environment::                 Environmental variables
@end menu

@node Emacs, Environment, Configuration, Configuration
@comment  node-name,  next,  previous,  up
@subsection Emacs
@cindex Emacs
@cindex .emacs


Add the following line to your @file{.emacs} file:

@example
(autoload 'mdb "mdb" "Maple debugger" t)
@end example

@node Environment,  , Emacs, Configuration
@comment  node-name,  next,  previous,  up
@subsection Environment
@cindex environmental variables

@vindex MAPLE_ROOT
As mentioned previously, the @env{MAPLE_ROOT} environmental variable
must be assigned to point to the installation directory of Maple.
@vindex MAPLE_INCLUDE_PATH
If you use Maple preprocessor include directives in your source
that must search a particular directory then you can assign
the environmental variable @env{MAPLE_INCLUDE_PATH} a comma-separated
sequence of directories to search.

@node Feedback,  , Configuration, Introduction
@section Feedback
@cindex feedback

If you find problems with Mdb, or if you have questions,
comments, or ideas, please mail them to Joe Riel, @email{jriel@@maplesoft.com}.

For bug reports, please provide as much information as possible,
including the version information of Emacs (@kbd{C-h v emacs-version}),
Mdb, (@kbd{C-h v mdb-version}), and Maple (@code{version()}).



@node Mdb Buffer, Showstat Buffer, Introduction, Top
@chapter Mdb Buffer

When Mdb is started (@kbd{M-x mdb}), a buffer opens in @code{mdb-mode}.
This buffer is an interface to the Maple engine.
It is a rudimentary form of the tty interface @command{cmaple}.

The prompt is @samp{(**)}.  
Entering Maple statements at the prompt sends them to the Maple engine.  
The output is printed beginning just below the prompt.
For example

@example
(**) y := x^2;
y := x^2
(**) int(%, x=1..3);
26/3
@end example


@menu
* Usage::                       Intended usage of the mdb buffer
* History and Key Bindings::    The history mechanism and key bindings
@end menu

@node Usage, History and Key Bindings, Mdb Buffer, Mdb Buffer
@section Usage
@cindex usage

The purpose of Mdb mode is to start the debugger.
The Maple @code{stopat} command can be used to set a breakpoint
in the procedure to debug.
For example,

@example
(**) stopat(int);
[int]
(**) int(x^2, x=1..2);
@end example

When the debugger starts, two buffers are opened,
the @emph{showstat buffer} (@pxref{Showstat Buffer}),
which displays the current procedure,
and 
the @emph{debugger output buffer}, 
which displays Maple output during debugging.

When debugging is finished, control returns to the Mdb buffer
and the output of the program is displayed in the buffer.



@node History and Key Bindings,  , Usage, Mdb Buffer
@section History and Key Bindings
@cindex history, mdb-mode
@cindex key bindings, mdb-mode

@code{Mdb-mode} maintains a 50-line command history
(the maximum size can be configured by customizing @code{mdb-history-size}).
@vindex mdb-history-size
The following table lists the key bindings defined by @code{mdb-mode}.

@table @asis
@kindex M-p
@kindex Up
@findex mdb-history-prev
@item Up
@itemx M-p (@code{mdb-history-prev})
Recall previous input.

@kindex Down
@kindex M-n
@findex mdb-history-next
@item Down
@itemx M-n (@code{mdb-history-next})
Recall next input.

@kindex C-a
@kindex C-u C-a
@item C-a (@code{mdb-bol})
Move to beginning of line (right of the prompt).
@kbd{C-u C-a} moves to the left margin.

@end table




@node Showstat Buffer, Main Index, Mdb Buffer, Top
@chapter Showstat Buffer
@cindex showstat buffer

The showstat buffer, which uses @code{mdb-showstat-mode},
becomes active when an instrumented Maple procedure activates a breakpoint or watchpoint.
The buffer displays the output of the Maple @code{showstat} command, that is,
the current procedure being debugged.
Maple statements are numbered and Maple keywords and syntactic elements are highlighted.
The Maple statement to be executed next is indicated by an @emph{overlay-arrow} in the left margin.
Breakpoints are marked by asterisks to the right of the statement numbers.

The following figure shows a typical display.
The overlay-arrow @samp{=>} is at the first statement of the procedure,
which is also marked with an asterisk indicating that there is a breakpoint here.

@example
@anchor{fibonacci}
@iftex
@strong{fibonacci} := @strong{proc}(i::integer) 
=> 1*  @strong{if} i < 1 @strong{then}
   2     0
       @strong{elif} i = 1 @strong{then}
   3     1
       @strong{else}
   4     procname(i-2)+procname(i-1)
       @strong{end if}
@strong{end proc}
@end iftex
@ifinfo
fibonacci := proc(i::integer) 
=> 1*  if i < 1 then
   2     0
       elif i = 1 then
   3     1
       else
   4     procname(i-2)+procname(i-1)
       end if
end proc
@end ifinfo
@end example


 

@example
@end example

@code{Mdb-showstat-mode} binds keys to the common debugging commands. 
It also provides commands that are not available in the Maple debugger.
The following sections describe these bindings and commands.
They are grouped according to function.

@menu
* Execution::                   Executing procedure statements
* Status::                      Determining debugger status
* Breakpoints::                 Setting and clearing breakpoints
* Watchpoints::                 Setting and clearing watchpoints
* Evaluation::                  Evaluating expressions
* Miscellaneous::               Miscellaneous commands
* Help::                        Get help
@end menu

@node Execution, Status, Showstat Buffer, Showstat Buffer
@section Execution
@cindex execution

Mdb supports all the Maple debugger commands for executing the statements of
a procedure.  These commands are bound to single keystrokes in the Showstat buffer.
Output from these commands is written to the @emph{debugger output buffer}.

When any of these commands are executed, the cursor moves forward one character
and, if the flavor of Emacs supports it, the cursor changes to a hollow box.
This indicates that it is waiting for Maple to respond (for most commands this
change is too short to be noticeable).
When Maple responds the cursor moves to the next statement to be executed 
and the cursor returns to a filled box.

The cursor types can be customized via
the variables @code{mdb-cursor-waiting} and @code{mdb-cursor-ready}.
@vindex mdb-cursor-waiting
@vindex mdb-cursor-ready

The following table describes each of the execution commands.

@table @asis

@kindex c
@findex mdb-cont
@item c (@code{mdb-cont})
Continue: run until the next breakpoint or watchpoint, or until the program terminates.

@kindex i
@findex mdb-into
@item i (@code{mdb-into})
Into: halfway between @code{next} (@code{n}) and @code{step}
(@code{s}).  Executes the next statement.  Execution stops before the
following statement within the current function, regardless of whether
it is at the current nesting level or in the body of a control
structure. Execution does not stop in a called function.

@kindex n
@findex mdb-next
@item n (@code{mdb-next})
Next: execute the next statement.  If the statement
is a control structure (for example, @code{if} or @code{for}), it is
executed in its entirety before execution stops again. Likewise, if
the statement contains function calls, these are executed in their
entirety.  After executing the statement, control returns to the
Debugger as though a breakpoint had been set.

@kindex o
@findex mdb-outfrom
@item o (@code{mdb-outfrom})
Outfrom: execute until the current statement sequence has finished, or
until a breakpoint or watchpoint is encountered. If this command is
executed while stopped in a loop, execution continues until just
before the first statement to be executed after the closing @code{end do}.
Note that if the same breakpoint that caused execution to stop in
the loop is encountered again in a subsequent iteration of the loop,
execution will stop again. If this command is executed while
stopped in the body of an @code{if} statement, execution continues until just
before the first statement to be executed after the closing @code{end if}.

@kindex q
@findex mdb-quit
@item q (@code{mdb-quit})
Quit: terminate execution immediately.

@kindex r
@findex mdb-return
@item r (@code{mdb-return})
Return: execute statements until the first statement to be executed
after the currently executing procedure returns.

@kindex s
@findex mdb-step
@item s (@code{mdb-step})
Step: execute the next statement at any level.  Execution stops before
the following statement, regardless of whether it is at the current
nesting level, in the body of a control structure (for example,
@code{if}), or in a called function.

@kindex @key{SPACE}
@findex mdb-send-last-command
@item @key{SPACE} (@code{mdb-send-last-command})
Re-execute the last command.
This only applies to the commands in this table.

@kindex @kbd{C-c C-c}
@findex mdb-kill-maple
@item C-c C-c (@code{mdb-kill-maple})
Kill the maple process, switch to the @code{Mdb Buffer}, and restart the Maple process.
This can be used to stop a runaway Maple computation (say an infinite loop).
OpenMaple does not properly service interrupts, so it is currently not possible to
interrupt it and regain control, as can be done with the builtin Maple debugger.

@end table

@node Status, Breakpoints, Execution, Showstat Buffer
@section Status
@cindex status

Mdb supports the following debugger commands for querying the status
of the debugger.

@table @asis

@kindex k
@findex mdb-showstack
@item k (@code{mdb-showstack})
Showstack: display an abbreviated form of the calling stack.
Only the names of the procedures are shown.  The name of the current
procedure is not shown.

@kindex K
@findex mdb-where
@item K (@code{mdb-where})
Where: display the stack. 
The top-most level is shown first.
For each entry in the stack,
the name of the calling procedure and the current statement within it are shown,
followed on the next line by the list of arguments passed to corresponding procedure.
An optional prefix argument can be passed; it specifies the number of levels to display.
For example @kbd{C-u 2 K} displays the lowest two levels.

@kindex p
@findex showstop
@item p (@code{mdb-showstop})
Showstop: display a list of all procedures containing breakpoints, all
watchpoints, and all error watchpoints.

@kindex x
@findex showexception
@item x (@code{mdb-showexception})
Showexception: display the value of @code{lastexception}.

@kindex X
@findex showerror
@item X (@code{mdb-showerror})
Showerror: display the value of @code{lasterror}.


@end table


@node Breakpoints, Watchpoints, Status, Showstat Buffer
@section Breakpoints
@cindex breakpoints

Mdb can set and clear breakpoints, watchpoints, and error watchpoints.
Breakpoints can be set and cleared as is done in the Maple debugger, that is, 
by evaluating the expression @code{stopat <statement-number>}, 
however, the more convenient way is to move the cursor to the statement 
and type @kbd{b} or @kbd{u}, respectively.
A statement with a breakpoint has an asterisk to the right of the statement number;
@pxref{fibonacci,,the fibonacci listing}.

@table @asis

@kindex b
@findex mdb-breakpoint
@item b (@code{mdb-breakpoint})
Stopat:  Set a breakpoint at the start of the statement at the cursor.
An asterisk appears to the right of the statement number.

@kindex p
@findex mdb-showstop
@item p (@code{mdb-showstop})
Showstop: display a list of all procedures containing breakpoints, all
watchpoints, and all error watchpoints.

@kindex u
@findex mdb-unstopat
@item u (@code{mdb-unstopat})
Unstopat: Clear a breakpoint at the start of the statement at the cursor.

@end table

@node Watchpoints, Evaluation, Breakpoints, Showstat Buffer
@section Watchpoints
@cindex watchpoints

A @emph{watchpoint} set on a variable causes the debugger to stop 
immediately following a statement that assigns a value to that variable.
A @emph{conditional watchpoint} is a watchpoint with an associated value;
the watchpoint is tripped when the variable is assigned that value.

Maple distinguishes two types of watchpoints: @emph{global} and @emph{local}.
Global watchpoints apply to global variables, local watchpoints to local variables.
The Maple debugger has a bug in that it does not properly handle watchpoints
for variables that are local to a module-local variable (that is, a variable
declared as local to a procedure that is local to a module).  
Fortunately, a global watchpoint can be set on such a variable; however,
it must be reset each time the procedure is debugged.

As an example,
a watchpoint set on a @code{for} loop counter
causes the debugger to stop at the top of each loop and print the value of the counter.


@table @asis

@kindex I
@findex mdb-stopwhenif
@item I (@code{mdb-stopwhenif})
stopwhenif:  Set a conditional watchpoint on the specified global variable, 
and display the current list of all watchpoints.

@kindex p
@findex mdb-showstop
@item p (@code{mdb-showstop})
Showstop: display a list of all procedures containing breakpoints, all
watchpoints, and all error watchpoints.


@kindex w
@kindex C-u w
@findex mdb-stopwhen-local
@item w (@code{mdb-stopwhen-local})
stopwhen: Set a local watchpoint.   
The variable name is entered in the mini-buffer; the default is taken
from the context at the cursor.
Use @kbd{C-u w} to clear a watchpoint.


@kindex W
@findex mdb-stopwhen-global
@item W (@code{mdb-stopwhen-global})
stopwhen: Set a global watchpoint. 




@end table


@node Evaluation, Miscellaneous, Watchpoints, Showstat Buffer
@section Evaluation
@cindex evaluation, expression

Mdb can evaluate expressions using the current context of Maple.

@table @asis

@kindex a
@findex mdb-args
@item a (@code{mdb-args})
Display the arguments of the current procedure as a vertical list of values.

@kindex A
@findex mdb-show-args-as-equations
@item A (@code{mdb-show-args-as-equations})
Display the arguments of the current procedure as a vertical list of equations.
The left-side of each equation is the formal parameter, 
the right-side is the value.

@kindex e
@findex mdb-eval-and-display-expr
@item e (@code{mdb-eval-and-display-expr})
Evaluate an expression in the current context.
The expression is entered in the mini-buffer.  
The default expression is taken from the text at the cursor.

@kindex E
@findex mdb-eval-and-display-expr-global
@item E (@code{mdb-eval-and-display-expr-global})
Evaluate an expression in the global context.
The expression is entered in the mini-buffer.  
The default expression is taken from the text at the cursor.

@kindex .
@findex mdb-eval-and-prettyprint
@item . (@code{mdb-eval-and-prettyprint})
Evaluate an expression and prettyprint the result.
The pretty-printing depends on the type of the evaluated expression.
The first line of the display (after the echoing of the expression)
shows the type of the output, the remaining lines display the
expression in an expanded form.

For a list or set, each element is displayed on a separate line.
For a record or table, each field/entry is displayed as an equation
with the index/field on the left, the entry on the right.

For example, the display of a record named @samp{SomeRecord} looks like

@example
@anchor{prettyprint}
SomeRecord:
(*record*)
a = 23,
b = 12,
c = NULL
@end example


@end table

@node Miscellaneous, Help, Evaluation, Showstat Buffer
@section Miscellaneous
@cindex miscellaneous

@table @asis

@kindex T
@findex mdb-toggle-truncate-lines
@item T (@code{mdb-toggle-truncate-lines})
Toggle the truncating/wrapping of long lines. 
With prefix argument (@kbd{C-u T}) do so in the @emph{debugger output buffer}.

@end table

@node Help,  , Miscellaneous, Showstat Buffer
@section Help
@cindex help

@table @asis

@kindex h
@findex mdb-help-debugger
@item h (@code{mdb-help-debugger})
Display the Maple help page for the Maple debugger.

@kindex C-h m
@item C-h m
Display the help for this mode.

@kindex C-?
@findex maplev-help-at-point
@item C-? (@code{maplev-help-at-point})
Display a Maple help page.  The topic is entered in the mini-buffer,
with the default the word under the cursor.

@kindex M-?
@findex maplev-proc-at-point
@item M-? (@code{maplev-proc-at-point})
Display a Maple procedure.  The procedure name is intered in the mini-buffer,
with the default the word under then cursor.

@end table




@node Main Index, Key Index, Showstat Buffer, Top
@unnumbered Main Index
@printindex cp

@node Key Index, Command and Variable Index, Main Index, Top
@unnumbered Key Index
@printindex ky

@node Command and Variable Index,  , Key Index, Top
@unnumbered Command and Variable Index

@menu
* Command Index::               An index of commands
* Variable Index::              An index of variables
@end menu

@node Command Index, Variable Index, Command and Variable Index, Command and Variable Index
@section Function Index
@printindex fn

@node Variable Index,  , Command Index, Command and Variable Index
@section Variable Index
@printindex vr


@bye
