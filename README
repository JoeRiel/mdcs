This package provides an Emacs major mode, mdb, for debugging Maple
code.  It is a frontend to the builtin Maple debugger.  Rather than
seeing a single line of a debugged procedure, the entire procedure is
displayed in a buffer, with keywords font-locked, and the cursor moves
through the buffer as the code is executed.  Keyboard shortcuts are
assigned for all the debugging operations, including tracing,
evaluation, setting breakpoints and watchpoints.  Commands are defined
for displaying procedure arguments and various structures in a nice
way.

REQUIREMENTS
------------
* GNU Emacs 22.2.1+
* The binary pmaple and shell script emaple.
* maplev-mode (Emacs mode for developing Maple code)

INSTALLATION
------------
Move mdb.el and ir.el to where Emacs can find them and (preferably)
byte-compile them.  Add the following to the .emacs file:

(autoload 'mdb "mdb" "Maple debugger" t)

Compile and install pmaple (in the c directory),
which uses provides an OpenMaple interface to the
Maple engine.   See the c/README for (scant) details.

USAGE
-----
Start mdb.

M-x mdb

This brings up a Maple prompt (with the default installation, the
prompt is the string "(**) ".  You can enter standard Maple commands.
The shell is currently rather crude.

To debug a procedure, instrument it in the usual way, that is,
by using the stopat procedure.  For example, to debug int, do

(**) stopat(int):

When int is executed, the debugger starts and mdb automatically
switches to the *showstat* buffer.

(**) int(x^2,x);

The showstat buffer maps single keys to debugger commands.


showstat-mode:
Major mode for stepping through a debugged Maple procedure.
This mode is automatically applied to the `mdb-showstat-buffer' generated by `mdb'.

Tracing
-------
SPC repeat the last tracing command
c (cont) continue execution until next breakpoint
n (next) execute next statement at current nesting level
i (into) execute next statement at any level in current procedure
o (outfrom) execute current statement sequence or until breakpoint
s (step) execute next statement at any level
r (return) continue executing until current procedure returns
q (quit) terminate debugging, return to mdb buffer
C-c C-c kill and restart the Maple process

Breakpoints
-----------
b (stopat) set breakpoint at cursor
u (unstopat) clear breakpoint at cursor
p (showstop) display all breakpoints
I (stopwhenif) set watchpoint on variable = value
w (stopwhen) set watchpoint on local variable
C-u w (stopwhen) clear watchpoint on local variable
W (stopwhen) set watchpoint on global variable
C-u W (stopwhen) clear watchpoint on global variable

Information
-----------
A display the parameter names and values
a display the arguments of the current procedure
h display Maple debugger help page
k (showstack) display abbreviated stack
K (where) display stack of procedure calls
l move (return) cursor to current state
X diplay the last error
x diplay the last exception

Evaluation
----------
e evalute a Maple expression
E evalute a Maple expression in a global context
. evaluate and prettyprint a Maple expression

Miscellaneous
-------------
C-c C-o pop to the mdb buffer
C clear the debugger output buffer
h display help page for the Maple debugger
? display a Maple help page
M-? display a Maple procedure

