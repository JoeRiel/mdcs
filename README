VERSION 0.1.1.9

This package provides the client and server for a Maple Debugger
Client/Server architecture, an enhancement to the existing Maple
debugger.

The server side is an Emacs package with several major modes
for displaying and controlling the code that is being debugged.
The client side is a Maple package that, when invoked,
replaces the Maple library debugger.

REQUIREMENTS
------------
* GNU Emacs 23.1+ (earlier versions may work)
* maplev-mode (Emacs mode for developing Maple code)
* Maple 14+ (earlier versions should work)

INSTALLATION
------------
Copy the files to locations appropriate on your system.
Here is where I put the various files:

   $HOME/maple/lib    :  mdc.mla mdc.hdb
   $HOME/.emacs.d/mds :  lisp/mds*.el
   $HOME/share/info   :  doc/mds (do not include the "doc/")

Under the doc subdirectory is an html format of the mds manual.  It
may be useful if you do not have Emacs or info installed and so cannot
read the info file (mds).

The provided install file can be used to do the copying,
just be sure to check that it does what you want.  Run

./install

CONFIGURATION
-------------
Modify your .emacs file.  I have the following

(push "/home/joe/.emacs.d/mds" load-path)
(autoload 'mds "mds" "Restart the Maple Debugger Server" t)
(global-set-key [f12] 'mds-windows-cycle-clients)
(global-set-key [C-f12] 'mds-windows-cycle-groups)

The binding to the f12 key is to permit quickly cycling through the
connected clients.  Use C-f12 to cycle through groups of clients
(which can be generated by using the mdc:-Grid package,
see the Maple help pages, ?mdc[Grid]).

Restarting the server disconnects any clients. 

USAGE
-----
Fire up Emacs and launch the server:

M-x mds

Now launch Maple, either tty or the GUI.  If libname
is set properly, you should be able to access help for
the Maple Debugger Client (mdc), but typing ?mdc.

For those in hurry, just do

> mdc(stopat=int): # you can use regular stopat as well.
> int(x,x);

If you then go to Emacs, you should see an mds-showstat
and mds-output buffer displayed.  The operation is
similar to that of mdb, but the mds-output buffer
looks substantially different.   

In the mds-showstat buffer, type C-h m to get the following help,
which briefly describes what each key does.

Tracing
-------
SPC repeat the last tracing command
c (cont) continue execution until next breakpoint
n (next) execute next statement at current nesting level
i (into) execute next statement at any level in current procedure
o (outfrom) execute current statement sequence or until breakpoint
r (return) continue executing until current procedure returns
s (step) execute next statement at any level
t (trace) set tracing mode
q (quit) terminate debugging, return to mdb buffer

Breakpoints
-----------
b (stopat) set breakpoint at cursor
B (stopat-cond) set conditional breakpoint at cursor
u (unstopat) clear breakpoint at cursor
p (showstop) display all breakpoints
I (stopwhenif) set watchpoint on variable = value
w (stopwhen) set watchpoint on local variable
C-u w (stopwhen) clear watchpoint on local variable
W (stopwhen) set watchpoint on global variable
C-u W (stopwhen) clear watchpoint on global variable

Information
-----------
A display the parameter names and values
a display the arguments of the current procedure
h display Maple debugger help page
k (showstack) display abbreviated stack
K (where) display stack of procedure calls
l move (return) cursor to current state
X diplay the last error
x diplay the last exception

Evaluation
----------
e evalute a Maple expression
E evalute a Maple expression in a global context
. evaluate and prettyprint a Maple expression

Miscellaneous
-------------
C-c C-o pop to the mdb buffer
C clear the debugger output buffer
h display help page for the Maple debugger
H display info page for Mdb
T toggle-truncate-lines (C-u for output buffer)
? display a Maple help page
M-? display a Maple procedure


